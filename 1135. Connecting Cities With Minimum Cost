class Solution {
public:
    int minimumCost(int n, vector<vector<int>>& connections) {
        vector<vector<pair<int,int>>> graph(n+1);
        for(int i=0;i<connections.size();i++){
            int x = connections[i][0];
            int y = connections[i][1];
            int w = connections[i][2];
            graph[x].push_back({y,w});
            graph[y].push_back({x,w});
        }

        vector<int> vis(n+1,0);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        
        pq.push({0,1});
        int mincost = 0;
        int cnt = 0;
        while(!pq.empty()){
            int x = pq.top().second;
            int dist = pq.top().first;
            pq.pop();

            if(vis[x]==1)
            continue;
            vis[x] = 1;
            cnt++;
            mincost += dist;
            for(int i=0;i<graph[x].size();i++){
                int y = graph[x][i].first;
                int tdist = graph[x][i].second;

                if(vis[y]==0){
                    pq.push({tdist,y});
                }
            }
        }
        if(cnt<n)
        return -1;
        return mincost;

    }
};
